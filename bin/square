#!/usr/bin/env node
"use strict";

/**
 * Library modules
 */

var program = require('commander')
  , path = require('path')
  , watch = require('watch')
  , findit = require('findit')
  , color = require('colors')
  , _ = require('underscore')._;

/**
 * Square library.
 */

var Square = require('../lib/square')
  , npm = require('../package')
  , square = new Square();

/**
 * Argument filters for commander.
 *
 * @type {Object}
 * @api private
 */

program.filters = {
    ignore: function ignore (ignore) { return ~this.indexOf(ignore) }
  , listing: function listing (val) { return val.split(',') }
};

/**
 * Setup the commandline interface.
 */

program
  .version(npm.version)
  .usage('[options]')
  .option('-b, --bundle <dir>', 'the location of the package file')
  .option('-w, --watch [dir]', 'watch the bundled files for changes and rebuild')
  .option('-e, --extension <extension>', 'filter on this file extension')

  // options that require argument filtering
  .option('-f, --filename <file>', 'alternate filenames', program.filters.listing)
  .option('-i, --ignore [files]', 'ignore these files', program.filters.listing)
  .option('-p, --plugin <plugins>', 'which plugins should be included', program.filters.listing);

/**
 * Display addition help information.
 */

program.on('--help', function help () {
  console.log('');
  console.log('  Examples:');

  console.log('');
  console.log([
      '    # Building for development with multiple plugins \n'.grey
    , '    square --bundle '.cyan
    , './'.white
    , ' --plugin '.cyan
    , 'debug,crush'.white
  ].join(''));

  console.log('');
  console.log([
      '    # Only build css files \n'.grey
    , '    square --bundle '.cyan
    , './other/directory'.white
    , ' --plugin '.cyan
    , 'crush'.white
    , ' --extension '.cyan
    , 'css'.white
  ].join(''));
  process.exit();
});

// output the help if it's called without arguments
if (!process.argv.slice(2).length) process.argv.push('--help');

// output a fancy pancy logo, [square] for le win.
[
    ''
  , 'o-o  o-o o  o o-o o-o o-o '.cyan
  , ' \\  |  | |  | |-| |   |- '.cyan + ('      version: ' + npm.version).white
  , 'o-o  o-O o--o o o-o   o-o '.cyan
  , '       |                  '.cyan
  , '       o                  '.cyan
  , ''
].forEach(function each (line) {
  console.error('  ' + line);
});

// all the event listeners are attached can we can start parsing the arguments, as
// this a sync call, we need to be 100% sure that every listener is added.
program.parse(process.argv);

/**
 * Set some defaults based on the flags.
 */

program.filename = Array.isArray(program.filename)
  ? program.filename
  : ['square', 'bundle'];

program.ignore = Array.isArray(program.ignore)
  ? program.ignore
  : [];

program.bundle = program.bundle || process.env.PWD;

program.plugin = Array.isArray(program.plugin)
  ? program.plugin
  : [];

/**
 * Display a not found message.
 *
 * @api private
 */

program.notFound = function notFound () {
 [
    'We are unable to find the '.white
    + (program.filename.join('.json, ') + '.json').red
    + ' files.'.white
  , ''
  , 'Please double check if these files are located in the '.white
    + program.bundle.red
    + ' directory.'.white
  , 'Thanks for flying Square.'.white
 ].forEach(function output (line) {
    square.logger.error(line);
 });
};

/**
 * Make sure that the bundle location exists, so we don't get any ENOENT errors
 */

if (!path.existsSync(program.bundle)) {
  return program.notFound();
}

/**
 * Start search the given directory tree for square.json files.
 */

var found = findit.find(program.bundle)
  , files = []
  , filenames = new RegExp('\\/('+ program.filename.join('|') +')\\.json', 'gi'); 

found.on('file', function foundFile (file, fstat) {
  if (!filenames.test(file)) return;
  if (program.ignore.some(program.filters.ignore.bind(file))) return;

  files.push(file);
});

found.on('end', function end () {
  if (!files.length) return program.notFound();

  square.bundle(files[0]);

  // process the plugins
  program.plugin.forEach(function (plugin) {
    square.plugin(plugin);
  });

  square.build(program.extension);
});
